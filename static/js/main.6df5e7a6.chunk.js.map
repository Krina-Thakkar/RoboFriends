{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","console","log","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAceA,EAZF,SAACC,GACb,OACC,yBAAKC,UAAU,oDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACA,gCAAMJ,EAAMK,KAAZ,KACA,+BAAKL,EAAMM,MAAX,QCQaC,EAZE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGP,UAE/E,OACE,6BACEI,ICCUK,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKd,UAAU,OACf,2BAAOA,UAAU,mCAAmCe,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCM3FI,EATA,SAACnB,GAEf,OADAoB,QAAQC,IAAIrB,GAEX,yBAAKsB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEzB,EAAM0B,WCkBMC,E,kDArBd,aAAc,IAAD,8BACZ,gBACKC,MAAM,CACVC,UAAU,GAHC,E,8DAOKC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,yDAGAG,KAAKhC,MAAM0B,a,GAjBMQ,aCiDbC,G,wDA3Cd,aAAc,IAAD,8BACZ,gBAeDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAfzC,EAAKZ,MAAO,CACZpB,OAAQ,GACR8B,YAAa,IAJD,E,gEASO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACzB,OAAQqC,S,+BAQ9B,IAAD,OACDC,EAAiBd,KAAKJ,MAAMpB,OAAOuC,QAAO,SAAAvC,GAC/C,OAAOA,EAAOH,KAAK2C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAElE,OAA8B,IAA3BhB,KAAKJ,MAAMpB,OAAO0C,OACb,4CAIP,yBAAKjD,UAAU,MACd,wBAAIA,UAAU,MAAd,oBACA,kBAAC,EAAD,CAAWc,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAAQsC,W,GAnCNZ,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,OAECC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLV,QAAQU,MAAMA,EAAMqC,a","file":"static/js/main.6df5e7a6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\treturn(\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\n\t\t<div>\n\t\t<h2> {props.name} </h2>\n\t\t<p> {props.email} </p>\n\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n\tconst cardArray = robots.map((user,i)=>{\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].name}/>\n\t})\n\treturn(\n\t\t <div>\n\t   {cardArray}\n   \t</div>\n\t\t);\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t<input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange}/>\n\t\t</div>\n\t\t);\n}\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\tconsole.log(props);  \n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '850px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll; "," import React, {Component} from 'react';\n\n class ErrorBoundry extends Component{\n \tconstructor(){\n \t\tsuper();\n \t\tthis.state={\n \t\t\thasError: false\n \t\t}\n \t}\n\n \tcomponentDidCatch(error,info){\n \t\tthis.setState({hasError: true})\n \t}\n\n \trender(){\n \t\tif(this.state.hasError){\n \t\t\treturn <h1> OOppsss that's not good </h1>\n \t\t}\n \t\telse{\n \t\t\treturn this.props.children\n \t\t}\n \t}\n }\n\n export default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'; \n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state= {\n\t\trobots: [],\n\t\tsearchfield: ''\n\t\t}\n\t}\n\n\t// componentDidMount is a lifecycle method (mounting)\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots: users}));\n\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value })\n\t}\n\n\trender(){\n\t\tconst filteredRobots = this.state.robots.filter(robots => {\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\tif(this.state.robots.length===0){\n\t\t\treturn <h1> Loading... </h1>\n\t\t}\n\t\telse{\n\t\t\treturn(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'> RoboFriends!!! </h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t\t);\n\t\t} \n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import {robots} from './robots';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}